/* stylelint-disable declaration-no-important */

//
// Utility classes
// --------------------------------------------------

// Floats
// -------------------------

.clearfix {
  .clearfix();
}
.center-block {
  .center-block();
}
.pull-right {
  float: right !important;
}
.pull-left {
  float: left !important;
}


// Toggling content
// -------------------------

// Note: Deprecated .hide in favor of .hidden or .sr-only (as appropriate) in v3.0.1
.hide {
  display: none !important;
}
.show {
  display: block !important;
}
.invisible {
  visibility: hidden;
}
.text-hide {
  .text-hide();
}


// Hide from screenreaders and browsers
//
// Credit: HTML5 Boilerplate

.hidden {
  display: none !important;
}


// For Affix plugin
// -------------------------

.affix {
  position: fixed;
}

#each-breakpoint-display(@iterator:1) when(@iterator <= length(@grid-breakpoints)) {
  @breakpoint: extract(extract(@grid-breakpoints, @iterator), 1);
  @infix: breakpoint-infix(@breakpoint);
  #media-breakpoint-up (@breakpoint, {
    .d@{infix}-none         { display: none !important; }
    .d@{infix}-inline       { display: inline !important; }
    .d@{infix}-inline-block { display: inline-block !important; }
    .d@{infix}-block        { display: block !important; }
    .d@{infix}-table        { display: table !important; }
    .d@{infix}-table-row    { display: table-row !important; }
    .d@{infix}-table-cell   { display: table-cell !important; }
    .d@{infix}-flex         { display: flex !important; }
    .d@{infix}-inline-flex  { display: inline-flex !important; }
  });
  #each-breakpoint-display((@iterator + 1));
}
#each-breakpoint-display();

// float-left float-right

#each-breakpoint-float(@i: 1) when (@i =< length(@grid-breakpoints)) {
  @breakpoint: extract(extract(@grid-breakpoints, @i), 1);

  #media-breakpoint-up(@breakpoint, {
    @infix: breakpoint-infix(@breakpoint, @grid-breakpoints);

    .float@{infix}-left  { #float-left(); }
    .float@{infix}-right { #float-right(); }
    .float@{infix}-none  { #float-none(); }
  });

  #each-breakpoint-float((@i + 1));
}
#each-breakpoint-float();

// spacing
#each-breakpoint-spacing(@i: 1) when (@i =< length(@grid-breakpoints)) {
  @breakpoint: extract(extract(@grid-breakpoints, @i), 1);

  #media-breakpoint-up(@breakpoint, {
    @infix: breakpoint-infix(@breakpoint, @grid-breakpoints);

    @spacing-properties: margin m, padding p;

    #each-spacing-property(@ii: 1) when (@ii =< length(@spacing-properties)) {
      @spacing-property: extract(@spacing-properties, @ii);
      @prop: extract(@spacing-property, 1);
      @abbrev: extract(@spacing-property, 2);

      #each-spacer(@iii: 1) when (@iii =< length(@spacers)) {
        @item: extract(@spacers, @iii);
        @size: extract(@item, 1);
        @length: extract(@item, 2);

        .@{abbrev}@{infix}-@{size} { @{prop}: @length !important; }
        .@{abbrev}t@{infix}-@{size},
        .@{abbrev}y@{infix}-@{size} {
          @{prop}-top: @length !important;
        }
        .@{abbrev}r@{infix}-@{size},
        .@{abbrev}x@{infix}-@{size} {
          @{prop}-right: @length !important;
        }
        .@{abbrev}b@{infix}-@{size},
        .@{abbrev}y@{infix}-@{size} {
          @{prop}-bottom: @length !important;
        }
        .@{abbrev}l@{infix}-@{size},
        .@{abbrev}x@{infix}-@{size} {
          @{prop}-left: @length !important;
        }

        #each-spacer((@iii + 1));
      }
      #each-spacer();

      #each-spacing-property((@ii + 1));
    }
    #each-spacing-property();

    // Some special margin utils
    .m@{infix}-auto { margin: auto !important; }
    .mt@{infix}-auto,
    .my@{infix}-auto {
      margin-top: auto !important;
    }
    .mr@{infix}-auto,
    .mx@{infix}-auto {
      margin-right: auto !important;
    }
    .mb@{infix}-auto,
    .my@{infix}-auto {
      margin-bottom: auto !important;
    }
    .ml@{infix}-auto,
    .mx@{infix}-auto {
      margin-left: auto !important;
    }
  });

  #each-breakpoint-spacing((@i + 1));
}
#each-breakpoint-spacing();

@import "../utilities/_flex";
